'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (config) {
  const pluginComponents = [];
  const pluginUtilities = [];

  config.plugins.forEach(plugin => {
    plugin({
      config: (path, defaultValue) => _lodash2.default.get(config, path, defaultValue),
      rule: defineRule,
      utility: (selector, properties) => defineUtility(selector, properties, config.options),
      atRule: defineAtRule,
      e: _escapeClassName2.default,
      addUtilities: (utilities, variants = []) => {
        pluginUtilities.push((0, _wrapWithVariants2.default)(utilities, variants));
      },
      addComponents: components => {
        pluginComponents.push(...components);
      },
      prefix: selector => {
        return (0, _prefixSelector2.default)(config.options.prefix, selector);
      }
    });
  });

  return [pluginComponents, pluginUtilities];
};

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _escapeClassName = require('../util/escapeClassName');

var _escapeClassName2 = _interopRequireDefault(_escapeClassName);

var _prefixSelector = require('../util/prefixSelector');

var _prefixSelector2 = _interopRequireDefault(_prefixSelector);

var _wrapWithVariants = require('../util/wrapWithVariants');

var _wrapWithVariants2 = _interopRequireDefault(_wrapWithVariants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function defineRule(selector, properties) {
  const decls = _lodash2.default.map(properties, (value, property) => {
    return _postcss2.default.decl({
      prop: `${property}`,
      value: `${value}`
    });
  });

  return _postcss2.default.rule({ selector }).append(decls);
}

function defineUtility(selector, properties, options) {
  if (selector.startsWith('.')) {
    return defineUtility(selector.slice(1), properties, options);
  }

  const rule = defineRule((0, _prefixSelector2.default)(options.prefix, `.${(0, _escapeClassName2.default)(selector)}`), properties);

  if (options.important) {
    rule.walkDecls(decl => decl.important = true);
  }

  return rule;
}

function defineAtRule(atRule, rules) {
  const [name, ...params] = atRule.split(' ');

  return _postcss2.default.atRule({
    name: name.startsWith('@') ? name.slice(1) : name,
    params: params.join(' ')
  }).append(rules);
}