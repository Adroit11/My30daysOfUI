'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function ({ screens }) {
  const minWidths = extractMinWidths(screens);

  const atRules = _lodash2.default.map(minWidths, minWidth => {
    const atRule = _postcss2.default.atRule({
      name: 'media',
      params: `(min-width: ${minWidth})`
    });
    atRule.append((0, _defineClass2.default)('container', {
      'max-width': minWidth
    }));
    return atRule;
  });

  return [(0, _defineClass2.default)('container', {
    width: '100%'
  }), ...atRules];
};

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _defineClass = require('../util/defineClass');

var _defineClass2 = _interopRequireDefault(_defineClass);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function extractMinWidths(breakpoints) {
  return _lodash2.default.flatMap(breakpoints, breakpoints => {
    if (_lodash2.default.isString(breakpoints)) {
      breakpoints = { min: breakpoints };
    }

    if (!_lodash2.default.isArray(breakpoints)) {
      breakpoints = [breakpoints];
    }

    return (0, _lodash2.default)(breakpoints).filter(breakpoint => {
      return _lodash2.default.has(breakpoint, 'min') || _lodash2.default.has(breakpoint, 'min-width');
    }).map(breakpoint => {
      return _lodash2.default.get(breakpoint, 'min-width', breakpoint.min);
    }).value();
  });
} /* eslint-disable no-shadow */